// BASIC RECURSION PROBLEMS >>

Q1. Print name n times.
Q2. Print linearly from 1 to N.
Q3. Print from N to 1.
Q4. Print Linearly from 1 to N (But by backtrack)
Q5. Print from N to 1 (By Backtrack)


// CODE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<< Q1. Print name n times. >>>

import java.util.*;

class Recursion{
    
    public static void nTimes(int i, int n){
     if(i > n){     //BASE CASE
         return;
     }  
     System.out.println("Raj");
     nTimes(i + 1, n);
    }
    
    public static void main(String[] args) {
        System.out.println("<<Print Name N Times using Recursion >>");
    
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    nTimes(1, n);
    
    }
}

// OUTPUT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    raj
    raj
    raj


// TIME COMPLEXITY >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

f(1, 3) >> f(2, 3) >> f(3, 3) >> f(4, 3)

TC >> O(N)



// CODE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<< Q2. Print linearly from 1 to N. >>>

import java.util.*;

class Recursion {
    
    public static void nTimes(int i, int n){
        if( i > n){
            return ;
        }
        System.out.print(i);
        return nTimes(i+1, n);
    }
    
    public static void main(String[] args) {
        System.out.println("Print linearly from 1 to N.");
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        nTimes(1, n);
        
    }
}

// OUTPUT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1
2
3
4



// CODE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<< Q3. Print from N to 1. >>>

import java.util.*;

class Recursion {
    
    public static void nReverse(int i, int n){
        if( i < 1){
            return ;
        }
        System.out.print(i);
        return nTimes(i-1, n);
    }
    
    public static void main(String[] args) {
        System.out.println("Print linearly from 1 to N.");
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        nReverse(n, n);
        
    }
}

// OUTPUT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 3 2 1


// CODE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<< Q4. Print Linearly from 1 to N (But by backtrack) >>>

import java.util.*;

class Recursion{
    public static void nLinear(int i, int n){
        if(i < 1)
            return;
        return nLinear(i - 1, n);
        System.out.println(i);
    }
    public static void main(String args[]){
        System.out.println("Print linearly from 1 to N.");
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        nLinear(n, n);
    }

// OUTPUT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1 2 3
